# Load the dataset of existing customers
existing_customers <- read.csv("existing-customers.csv")
data_df<- as.data.frame(existing_customers)

# Remove rows with missing values
data_df<-data_df[complete.cases(data_df),]
head(data_df)

# Convert "class" variable to numerical
data_df$class <- ifelse(data_df$class == "<=50K", 0, 1)
head(data_df)
unique(data_df$class)

# Subset the data to create a smaller sample for modeling
existing_customers_sub <- data_df[1:2000, ]

# Remove rows with missing values
existing_customers_sub<-existing_customers_sub[complete.cases(existing_customers_sub),]

potential_customers <- read.csv("potential-customers.csv")
data_df<- as.data.frame(potential_customers)

library("rpart") 
income_model <- rpart(class ~ ., data = existing_customers_sub)
# Use the match function to rewrite column with matching RowID values from existing customers subset
data_df1$RowID <- match(data_df1$RowID, existing_customers_sub$RowID)
# Remove rows with NAs in the matched_RowID column
data_df1<-potential_customers[complete.cases(data_df1),]
#in the variable "RowID" in the dataset "potential_customers" I got values 1 to 2000 and I need to rename them from Row0 to Row1999
# Rename the values in "RowID" column in "potential_customers" 
new_row_names <- paste0("Row", 0:1999)
data_df1$RowID <- new_row_names
# Convert the "RowID" column to a factor
data_df1$RowID <- as.factor(data_df1$RowID) 
# Check the values of native.country in both data frames
unique(data_df1$native.country)
unique(existing_customers_sub$native.country)
# I need to remove rows, for which I can't make a prediction
data_df1 <- subset(data_df1, !native.country %in% c("Ireland", "Vietnam")) #new countries in a potential customers dataset.

data_df1$class <- predict(income_model, newdata = data_df1, na.action = na.pass)

# Merge the datasets on the common column
merged_data <- merge(data_df1, data_df, by = "RowID", all.x = TRUE)
head(merged_data) #merged_data$RowID is also a list of ID of people to send a promotion

high_income_response_rate <- 0.1
low_income_response_rate <- 0.05
response_rate <- ifelse(merged_data$class.y == "0", low_income_response_rate, high_income_response_rate)

# Calculate the expected profit for each person
high_income_profit <- 980
low_income_cost <- 310
promotion_cost <- 10
expected_profit <- ifelse(merged_data$class.y == "0", high_income_profit - promotion_cost, -low_income_cost - promotion_cost)
# Calculate the total expected profit
total_expected_profit <- sum(response_rate * expected_profit)
[1] 56749 EUROs

