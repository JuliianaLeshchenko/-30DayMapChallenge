###Day 1. Points. 
#Create a map of all casles and fortificattions, built on the territory of Ukraine.
library(ggplot2)
library(emoGG)
data <- read.csv("Castles.csv")
#plot points by coordinates
ggplot(data, aes(Lon, Lat, color = castle)) +
  geom_emoji(emoji="1f3f0")
#save in high resolution
ggsave("Castles.png", width = 25, height = 20, dpi=700)

###DAy 2. Lines.

install.packages("plotly")
library(plotly)
library(dplyr)
# airport locations
### reference HOW TO READ FROM GITHUB air <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')
air <- read.csv("air.csv", encoding = "UTF-8", header = T, stringsAsFactors = F)
# flights between airports
flights <- read.csv("flights.csv", encoding = "UTF-8", header = T, stringsAsFactors = F)
flights$id <- seq_len(nrow(flights))

# map projection
geo <- list(
  scope = 'europe',
  projection = list(type = 'azimuthal equal area'),
  showland = TRUE,
  landcolor = toRGB("gray95"),
  countrycolor = toRGB("gray80")
)

fig <- plot_geo(locationmode = 'europe', color = I("blue"))
fig <- fig %>% add_markers(
  data = air, x = ~long, y = ~lat, text = ~airport,
  size = ~cnt, hoverinfo = "text", alpha = 0.5
)
fig <- fig %>% add_segments(
  data = group_by(flights, id),
  x = ~start_lon, xend = ~end_lon,
  y = ~start_lat, yend = ~end_lat,
  alpha = 0.3, size = I(1), hoverinfo = "none"
)
fig <- fig %>% layout(
  title = 'Juliana: flight paths<br>30DayMapChallenge Day 2 Lines',
  geo = geo, showlegend = FALSE, height=800
)

fig

###Day 3. Polygons.
library(usdm)
Belgium <- getData("GADM", country="BE", level=2) # Download Belgium boundary
plot(Belgium)
library(tidyverse) #can we actually code without it?
library(rgdal) #to import shapefiles
library(broom) #to convert shapefiles into the data frame structure we need
library(wesanderson) #for some nice color palettes
#dataprovided by Statbel https://statbel.fgov.be/en/news/11514-russians-and-5624-ukrainians-live-belgium
data <- read.csv("Ukraine.csv", encoding = "UTF-8", header = T, stringsAsFactors = F)
data$id <- as.character(data$id)
class(data$id)
regional_df <- tidy(Belgium)
#Joining
regional_df2 <- left_join(regional_df, data, by="id")
summary(regional_df)
library(ggplot2)

map1<-ggplot(regional_df2, aes( x = long, y = lat, group=group)) +
  geom_polygon(aes(fill = value), color = "black")
map1

map2 <- map1 + scale_fill_gradient(low = "aquamarine", high =  "blue", na.value = "grey50")+
  theme(axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        axis.title.y=element_blank(),
        axis.title.x=element_blank(),
        rect = element_blank()) +
  labs(title="Ukrainians among the population of Belgium, calculated as a share of 1",
       subtitle="Data obtained from statbel.fgov.be",
       caption = "situation on 1 January 2021")
map2

### Pixel map
Ukraine <- getData("GADM", country="UA", level=1)
plot(Ukraine)
ggplot(Ukraine, aes(long,lat, group=group)) +
  geom_polygon() +
  coord_map() +
  theme_void()
#here’s is the tip for creating a pixel effect : round the long and lat, 
#in order to make the border more squared (now, we’ll also fill according to groups)

p <- ggplot(Ukraine, aes(round(long, 1),round(lat,1), group=group,fill = as.factor(group))) +
  geom_polygon() +
  guides(fill=FALSE) +
  coord_map() +
  theme_void()
library(dutchmasters)  
devtools::install_github("EdwinTh/dutchmasters")
p + scale_fill_dutchmasters(palette = "view_of_Delft")

### make own palette

library(ggplot2)
library(scales)
library(ggpubr)
#We create a named vector ('mycolors ') with all the colors we want to include in our palette. 
#To obtain a nice color combination you can use some webs like colorschemedesigner.com.
mycolors <- c(
  `violet`= "#332E4C",
  `pink`= "#AB486E",
  `darkviolet`='#463751',
  `brightviolet`='#2D254C',
  `paleorange`='#CAB17F',
  `darkgrape`='#493F62',
  `forestgreen`='#475F55',
  `grape`='#AC4844',
  `fireorange`='#393460',
  `grassgreen`='#62A163')
show_col(mycolors)
mycols <- function(...) {
  cols <- c(...)
  if (is.null(cols))
    return (mycolors)
  mycolors[cols]
}
#Next, we write a function called 'mycols' that extracts the hex codes from this vector by name.
mycols <- function(...) {
  cols <- c(...)
  if (is.null(cols))
  return (mycolors)
  mycolors[cols]
}
#combine our selected colors into different palettes (various combination of colors):
mypalettes <- list(
  `4reactor` = mycols("violet","pink","darkviolet", 'brightviolet', 'paleorange', 'darkgrape', 'forestgreen', 'grape', 'fireorange', 'grassgreen'))
  
#write a function to access and interpolate them:
reactor_pal <- function(palette = "4reactor", reverse = FALSE, ...) {
  pal <- mypalettes[[palette]]
  if (reverse) pal <- rev(pal)
  colorRampPalette(pal, ...)
}
#function allows to get a pallete by name from the list. 
#It also has a boolean condition determining whether to reverse the color order or not, and additional arguments to pass on to colorRampPallete():
reactor_pal("4reactor")
function (n) 
{
x <- ramp(seq.int(0, 1, length.out = n))
if (ncol(x) == 4L) 
rgb(x[,1L],x[,2L],x[, 3L],x[,4L], maxColorValue = 255)
else rgb(x[, 1L], x[, 2L], x[, 3L], maxColorValue = 255)
}
<bytecode: 0x000000000c23d200>
<environment: 0x0000000016033a70>
#create custom scales for ggplot2. 
#We create one function for color and another for fill, and each contains a boolean argument for the relevant aesthetic being discrete or not:
scale_color_reactor <- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
  pal <- freshwater_pal(palette = palette, reverse = reverse)
  
  if (discrete) {
    discrete_scale("colour", paste0("reactor_", palette), palette = pal, ...)
  } else {
    scale_color_gradientn(colours = pal(256), ...)
  }
}

scale_fill_reactor <- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
  pal <- freshwater_pal(palette = palette, reverse = reverse)
  
  if (discrete) {
    discrete_scale("fill", paste0("reactor_", palette), palette = pal, ...)
  } else {
    scale_fill_gradientn(colours = pal(256), ...)
  }
}
#try new palettes
p+ scale_fill_reactor(discrete = TRUE, palette = "4reactor")
